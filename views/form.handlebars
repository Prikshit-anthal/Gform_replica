<nav class="navbar">
    <div class="rightnav">
        <form action="/logout" method="POST">
            <button>Logout</button>
    </div>
</nav>
<div class="container">
    <div class="box" id="show">
        <a class="a" href="/newForm"><i class="fa fa-plus-square-o" aria-hidden="true"></i></a>
        <div class="hide">Create New form</div>
        <h1>FORMS YOU CREATED TILL NOW</h1>

    </div>
</div>







<script>
    var append = document.querySelector("#show");
    var counter = 7;
    var docRef = db.collection('form');
    var doc_id;

    function renderdata(doc) {
        var date = doc.data().date;
        doc_id = doc.id;
        additional = document.createElement("div");
        additional.className = 'row';
        //additional.setAttribute('data-id',doc_id);
        additional.setAttribute("data-id", String(doc.id));
        additional.innerHTML += `
          <a  href="" id="response" class="omg" onclick="getresponse(this)" style="margin: 10px; padding: 10px; font-size: 18px; font-weight: bold; float:left; color:black;">
           <div class="subject"> Maths </div>
           </a>
                <div class="fixedItems">
                    <div class="date">20/07/2021</div>
                    <a  class="delete"><i class="fa fa-trash" aria-hidden="true"></i></a>
                    <a  onclick="im_csv_fn(this)" class="download"><i class="fa fa-download" aria-hidden="true"></i></a>
                </div>
                
          `;
        brak = document.createElement("br");
        brak.className = "dont delete me";

        // brak.setAttribute('data-id',"null");
        append.appendChild(additional);
        append.appendChild(brak);



        append.childNodes[counter].childNodes[3].childNodes[1].innerHTML = date;
        append.childNodes[counter].childNodes[1].innerHTML = doc_id;

        let cross = append.childNodes[counter].childNodes[3].childNodes[3];
        counter += 2;
        //delete


        cross.addEventListener('click', (e) => {

            var result = confirm("Are you sure you want to delete this form?");
            if (result) {
                e.stopPropagation();
                let id = e.target.parentElement.parentElement.parentElement.getAttribute('data-id');

                docRef.doc(id).delete();
            }
        })


    }


    var dta = document.getElementById("show");
    docRef.onSnapshot(snapshot => {
        let changes = snapshot.docChanges();

        changes.forEach(change => {

            if (change.type == 'added') {
                renderdata(change.doc);


            }
            else if (change.type == 'removed') {
                let dataid = String(change.doc.id);
                let li = dta.querySelector('[data-id=\'' + String(change.doc.id) + '\']');

                // console.log(li.nextSibling);
                li.nextSibling.parentNode.removeChild(li.nextSibling);
                dta.removeChild(li);
                //dta.remove(li.nextSibling);


            }
        })
    })

    function getresponse(title) {
        var form_title = title.innerHTML;
        var clicked_title = "/response?form_title=" + form_title;
        title.href = clicked_title;
        console.log(clicked_title);


    }




</script>


<script>
    var roll_no = [], answer = [];
    async function im_csv_fn(that) {

        // Await for the promise to resolve
     
                let citiesRef = db.collection("form").doc(that.parentNode.previousSibling.previousSibling.innerHTML).collection("ans");
                let allCities = await citiesRef.get();
                for (const doc of allCities.docs) {
                    var p = doc.id;
                    roll_no.push(p)


                }

                for (var i = 0; i < roll_no.length; i++) {


                    let citiesRef = db.collection("form").doc(that.parentNode.previousSibling.previousSibling.innerHTML).collection("ans").doc(roll_no[i]).collection("ans_1");
                    let allCities = await citiesRef.get();
                    for (const doc of allCities.docs) {
                        var p = doc.data().ans;
                        var x = doc.id;

                        //console.log(p);
                        if (p == "pdf") {


                            let storageRef = firebase.storage().ref(that.parentNode.previousSibling.previousSibling.innerHTML + "/" + roll_no[i] + "/" + x.slice(0, x.length - 2));
                            let this_ref = storageRef.child('ans');

                            var limks = await this_ref.getDownloadURL();
                            //this_ref.getDownloadURL()
                            // limks.then((url) => {

                            p = limks;

                            //  }).catch(e => {
                            //     console.log('error uploading' + e);
                            // })

                        }
                        //console.log(doc.id);
                        //console.log(p + "ans element");
                        answer.push(p);
                    }



                }

                console.log(roll_no);
                console.log(answer);
            
        console.log("hui hui hui");
    }

   // console.log(that.parentNode.previousSibling.previousSibling.className);
  









</script>